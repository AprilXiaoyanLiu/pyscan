{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Region Scanning Part 2\n",
    "Before we subsampled a set of regions and then scanned the sampled data set to find a region of interest. In some cases we might want to scan a set of regions, but with the constraint that some amount of overlap on a range causes the region to be considered inside of that range. We can encode these constraints into the range scanning, but we have to reduce to a point set using a different procedure then before."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import shapefile\n",
    "import pyscan\n",
    "import matplotlib.pyplot as plt\n",
    "import csv\n",
    "\n",
    "def plot_points(ax, pts, c):\n",
    "    xs = []\n",
    "    ys = []\n",
    "    for pt in pts:\n",
    "        xs.append(pt[0] )\n",
    "        ys.append(pt[1])\n",
    "    ax.scatter(xs, ys, color=c, marker='.')\n",
    "\n",
    "def plot_points_traj(ax, pts, c):\n",
    "    xs = []\n",
    "    ys = []\n",
    "    for pt in pts:\n",
    "        xs.append(pt[0])\n",
    "        ys.append(pt[1])\n",
    "    ax.plot(xs, ys, color=c)\n",
    "    \n",
    "def plot_approx(ax, regions, core_set_pts):\n",
    "    for reg in regions:\n",
    "        plot_points_traj(ax, reg, \"g\")\n",
    "    plot_points(ax, core_set_pts, \"b\")\n",
    "    ax.set_axis_off()\n",
    "\n",
    "\n",
    "shape = shapefile.Reader(\"county_shapes/cb_2017_us_county_500k.shp\")\n",
    "population2017 = {}\n",
    "population2010 = {}\n",
    "\n",
    "with open(\"county_population/PEP_2017_PEPANNRES_with_ann.csv\", encoding='latin-1') as f:\n",
    "    reader = csv.DictReader(f)\n",
    "    headers = next(reader, None)\n",
    "    for row in reader:\n",
    "        population2017[row['GEO.id2'][-3:]] = int(row['respop72017'])\n",
    "        population2010[row['GEO.id2'][-3:]] = int(row['respop72010'])\n",
    "        \n",
    "regions = []\n",
    "weights2017 = []\n",
    "weights2010 = []\n",
    "for reg in shape.shapeRecords():\n",
    "    ignore = False\n",
    "    for p in reg.shape.points:\n",
    "        # remove counties outside of the continental US\n",
    "        if not (-124.84 <= p[0] <= -66.9 and 24.396 <= p[1] <= 49.4):\n",
    "            ignore = True\n",
    "            break\n",
    "    if not ignore:\n",
    "        weights2010.append(population2010[reg.record[1]]) #reg.record[2], reg.record[5])\n",
    "        weights2017.append(population2017[reg.record[1]]) #reg.record[2], reg.record[5])\n",
    "        regions.append([pyscan.Point(p[0], p[1], 1.0) for p in reg.shape.points])\n",
    "        "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we use the region simplification code from the region simplification page."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3108\n"
     ]
    }
   ],
   "source": [
    "alpha = .02\n",
    "r_min = .1\n",
    "\n",
    "red_reg = []\n",
    "blue_reg = []\n",
    "label = 0\n",
    "for reg, w10, w17 in zip(regions, weights2010, weights2017):\n",
    "    core_set_pts = pyscan.polygon_grid_even(reg, r_min * 2, alpha)\n",
    "    # Convert these to labeled points.\n",
    "    label += 1\n",
    "    red_reg.append([pyscan.LPoint(label, w10, p[0], p[1], 1.0) for p in core_set_pts])\n",
    "    blue_reg.append([pyscan.LPoint(label, w17, p[0], p[1], 1.0) for p in core_set_pts])\n",
    "print(len(red_reg))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Computing this coreset produces a set of points that adequately cover the entire USA to give spatial error of very roughly 1 miles for disks of size at least 5 miles in diameter. This set of points is too large to scan if we have to look at every disk, but is still tractable if we restrict the radii."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'max_disk_region' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-3-3e05acc24085>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mr_max\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1.0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mnet\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpyscan\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmy_sample\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mred_reg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m100\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mpyscan\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmy_sample\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mblue_reg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m100\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mdisk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmax_disk_region\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnet\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mred_reg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mblue_sample\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mr_min\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mr_max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0malpha\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdisc_f\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name 'max_disk_region' is not defined"
     ]
    }
   ],
   "source": [
    "disc_f = pyscan.DISC\n",
    "alpha = .02\n",
    "r_min = .1\n",
    "r_max = 1.0\n",
    "net = pyscan.my_sample(red_reg, 100) + pyscan.my_sample(blue_reg, 100)\n",
    "disk, value = max_disk_region(net, red_reg, blue_sample, r_min, r_max, alpha, disc_f)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "_, ax = plt.subplots(figsize=(16, 12))\n",
    "plt.axis('off')\n",
    "plot_points(ax, core_set_pts, \"r\")\n",
    "d = plt.Circle(disk.get_origin(), disk.get_radius(), color='g', alpha=.8)\n",
    "ax.add_artist(d)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
